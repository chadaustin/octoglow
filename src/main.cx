import json
import mutarray

declare require<a>: String => a

declare process: {
    argv: [String],
    exit: Number => (),
}

let http = require("http")
let console = require("console")
let fs = require("fs")
let url = require("url")

let port = 9999

fun errorResponse(response, statusCode: Number, statusMessage: String): () {
    response.statusCode = statusCode
    response.statusMessage = statusMessage
    response.end(toString(statusCode) + " - " + statusMessage)
}

fun successResponse(response, content: String) {
    response.statusCode = 200
    response.statusMessage = "OK"
    response.end(content)
}

/* BEGIN DIRECTORY LIST */

fun combine(a: String, b) {
    if a->endsWith("/") {
        return a + b
    } else {
        return a + "/" + b
    }
}

fun listDirectoriesInner(output: mutable [String], root, prefix) {
    output->append(prefix)

    let here = combine(root, prefix)
    let contents: [String] = fs.readdirSync(here)
    for entry in contents {
        let absEntry = combine(here, entry)
        let stat = fs.lstatSync(absEntry)
        if stat.isDirectory() {
            listDirectoriesInner(output, root, combine(prefix, entry))
        }
    }
}

fun listDirectories(root) {
    let rv = mutable []
    listDirectoriesInner(rv, root, ".")
    rv->sort()
    return rv->freeze()
}

fun getFolderContents(folder) {
    let rv = mutable []

    let contents: [String] = fs.readdirSync(folder)
    for entry in contents {
        let absEntry = combine(folder, entry)
        let stat = fs.lstatSync(absEntry)
        if stat.isFile() && (entry->endsWith(".jpeg") || entry->endsWith(".jpg")) {
            rv->append(entry)
        }
    }

    return rv->freeze()
}

/* END DIRECTORY LIST */

fun handleFoldersRequest(response, root: String) {
    let allFolders = listDirectories(root)

    let folders = json.encodeArray(allFolders->map(json.encodeString))
    let responseJSON = json.encodeObject(
        [json.ObjectMember("folders", folders)]
    )

    response.statusCode = 200
    response.statusMessage = "OK"
    response.setHeader("Content-Type", "application/json")
    response.end(json.renderJSON(responseJSON))
}

fun handleContentsRequest(response, root: String, folder: String) {
    let allFolders = listDirectories(root)
    // TODO: verify folder is in allFolders

    let contents = getFolderContents(combine(root, folder))
    let c = json.encodeArray(contents->map(fun(e) {
        json.encodeObject([
            json.ObjectMember("folder", json.encodeString(folder)),
            json.ObjectMember("name", json.encodeString(e)),
        ])
    }))
    let responseJSON = json.encodeObject(
        [json.ObjectMember("pictures", c)]
    )

    response.statusCode = 200
    response.statusMessage = "OK"
    response.setHeader("Content-Type", "application/json")
    response.end(json.renderJSON(responseJSON))
}

fun handlePhotoRequest(response, root, folder, file) {
    let allFolders = listDirectories(root)
    // TODO: verify folder is in allFolders
    let contents = getFolderContents(combine(root, folder))
    // TODO: verify file is in contents

    let d = fs.readFileSync(combine(combine(root, folder), file))
    response.statusCode = 200
    response.statusMessage = "OK"
    response.setHeader("Content-Type", "image/jpeg")
    response.end(d)
}

fun catch_<a>(f: () => a): ?a {
    let catcher: (() => a) => [a] = _unsafe_js("function(f){ try { return [f()]; } catch (e) { return []; } }")
    let result = catcher(f)
    if len(result) == 0 {
      None
    } else {
      Some(result->get(0))
    }
}

fun handleAssetRequest(response, asset) {
    // TODO: verify no .. in string
    let fullPath = combine("frontend", asset)
    let stat = match catch_(fun() { fs.lstatSync(fullPath) }) {
        Some(s) => s
        None => return errorResponse(response, 404, "Not found")
    }
    if stat.isFile() {
        let contents = fs.readFileSync(fullPath)
        let mediaType = if asset->endsWith(".html") {
            "text/html"
        } else if asset->endsWith(".css") {
            "text/css"
        } else if asset->endsWith(".js") {
            "text/javascript"
        } else {
            return errorResponse(response, 404, "Not found")
        }

        response.statusCode = 200
        response.statusMessage = "OK"
        response.setHeader("Content-Type", mediaType)
        response.end(contents)
    } else {
        errorResponse(response, 404, "Not found")
    }
}

fun handleRequest(request, response): () {
    if request.method != "GET" {
        return errorResponse(response, 405, "Method not supported")
    }

    let root = process.argv->get(2)

    let parsed = url.parse(request.url, True)
    let pathName = parsed.pathname

    if pathName == "/folders" {
        handleFoldersRequest(response, root)
    } else if pathName == "/contents" {
        let folder = parsed.query.folder
        handleContentsRequest(response, root, folder)
    } else if pathName == "/photo" {
        let folder2 = parsed.query.folder // TODO: test for this
        let file = parsed.query.photo
        handlePhotoRequest(response, root, folder2, file)
    } else if pathName == "/" {
        return handleAssetRequest(response, "index.html")
    } else {
        return handleAssetRequest(response, pathName->sliceFrom(1))
    }
}

fun main() {
    if len(process.argv) < 3 {
        print("pass a root photo path")
        process.exit(1)
    }

    let server = http.createServer(handleRequest)

    server.listen(port, fun() {
        console.log("Server listening on: http://localhost:%s", port)
    })
}

let _ = main()
